<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
		  http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">

    <display-name>oa-project</display-name>

    <welcome-file-list>
        <welcome-file>pages/index.jsp</welcome-file>
    </welcome-file-list>

    <!--
        1、在启动Web项目时，容器(比如Tomcat)会读web.xml配置文件中的两个节点 <listener> 和 <contex-param>。
        2、接着容器会创建一个 ServletContext (上下文),应用范围内即整个WEB项目都能使用这个上下文。
        3、接着容器会将读取到 <context-param> 转化为键值对,并交给 ServletContext。
        4、容器创建 <listener></listener> 中的类实例,即创建监听（备注：listener定义的类可以是自定义的类但必须需要继承ServletContextListener）。
        5、在监听的类中会有一个 contextInitialized (ServletContextEvent event) 初始化方法，在这个方法中可以通过
            event.getServletContext().getInitParameter("contextConfigLocation") 来得到 context-param 设定的值。
            在这个类中还必须有一个 contextDestroyed(ServletContextEvent event) 销毁方法.用于关闭应用前释放资源，比如说数据库连接的关闭。
        6、得到这个 context-param 的值之后,你就可以做一些操作了.注意,这个时候你的WEB项目还没有完全启动完成.这个动作会比所有的 Servlet 都要早。
    -->
    <context-param>
        <description>加载Spring容器，param-value指定Spring配置文件</description>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath*:spring/spring-*.xml</param-value>
    </context-param>

    <listener>
        <description>加载Spring容器监听器</description>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!--
        防止spring内存溢出监听器
          在Web应用程序关闭时IntrospectorCleanupListener将会刷新JDK的JavaBeans的Introspector缓存。
          确保Web应用程序的类加载器以及其加载的类正确的释放资源
        注意
           在使用Spring内部的bean机制时，不需要使用此监听器，因为Spring自己的introspection results cache
           将会立即刷新被分析过的JavaBeans Introspector cache，而仅仅会在应用程序自己的ClassLoader里面持有一个cache。
    -->
    <listener>
        <description>防止spring内存溢出监听器</description>
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
    </listener>


    <filter>
        <description>ApacheShiro过滤器，DelegatingFilterProxy通过代理模式将spring容器的bean和filter关联起来</description>
        <filter-name>shiroFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>

        <init-param>
            <description>设置true由servlet容器控制filter的生命周期</description>
            <param-name>targetFilterLifecycle</param-name>
            <param-value>true</param-value>
        </init-param>

        <init-param>
            <description>设置 spring 容器 filter 的bean id，如果不设置则找与 filter-name 一致的 bean</description>
            <param-name>targetBeanName</param-name>
            <param-value>shiroFilter</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>shiroFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


    <!--<listener>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
    </listener>-->

    <listener>
        <listener-class>com.oa.web.support.content.AppContext</listener-class>
    </listener>


    <!-- post乱码过虑器 -->
    <filter>
        <description>字符集过滤器</description>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <description>字符集编码</description>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


    <filter>
        <filter-name>IllegalCharacterFilter</filter-name>
        <filter-class>com.oa.web.support.filter.charcter.IllegalCharacterFilter</filter-class>
        <init-param>
            <param-name>characterParams</param-name>
            <param-value>',",&lt;,&gt;,/>,/xss,script>,../,&amp;(,)[,],%</param-value>
            <!-- 此处加入要过滤的字符或字符串，以逗号隔开 -->
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>IllegalCharacterFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


    <!--<filter>-->
        <!--<filter-name>loginFilter</filter-name>-->
        <!--<filter-class>cn.kjzf.comm.web.filter.LoginFilter</filter-class>-->
        <!--<init-param>-->
            <!--<param-name>AuthType</param-name>-->
            <!--<param-value>local</param-value>-->
        <!--</init-param>-->
    <!--</filter>-->
    <!--<filter-mapping>-->
        <!--<filter-name>loginFilter</filter-name>-->
        <!--<url-pattern>/*</url-pattern>-->
    <!--</filter-mapping>-->


    <servlet>
        <description>SpringMvc前端控制器</description>
        <servlet-name>springDispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <!-- 配置 DispatcherServlet 的一个初始化参数（配置处理器映射器、适配器等等）：配置 SpringMVC 配置文件的位置和名称
			实际上也可以不通过 contextConfigLocation 来配置SpringMVC的配置文件，
			如果不配置contextConfigLocation，默认加载的是：/WEB-INF/<servlet-name>-servlet.xml（springmvc-servlet.xml）
		-->
        <init-param>
            <description>SpringMvc配置文件，param-value指定配置文件路径</description>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring/spring-mvc.xml</param-value>
        </init-param>

        <!-- 服务器自动加载该 Servlet （加载优先级） -->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>springDispatcherServlet</servlet-name>
        <!--
            第一种：*.action，访问以.action结尾 由DispatcherServlet进行解析
            第二种：/，所以访问的地址都由DispatcherServlet进行解析，对于静态文件的解析需要配置不让DispatcherServlet进行解析,
                      使用此种方式可以实现 RESTful风格的url
            第三种：/*，这样配置不对，使用这种配置，最终要转发到一个jsp页面时，
            仍然会由DispatcherServlet解析jsp地址，不能根据jsp页面找到handler，会报错。
         -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!-- 自定义标签 -->
    <jsp-config>
        <taglib>
            <taglib-uri>/ito-tag-function</taglib-uri>
            <taglib-location>/WEB-INF/tld/ito.tld</taglib-location>
        </taglib>
    </jsp-config>


    <!-- 配置session超时时间，单位分钟 -->
    <session-config>
        <session-timeout>900</session-timeout>
    </session-config>

    <error-page>
        <error-code>404</error-code>
        <location>/pages/error/error404.jsp</location>
    </error-page>
    <error-page>
        <error-code>500</error-code>
        <location>/pages/error/error500.jsp</location>
    </error-page>

    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.html</url-pattern>
    </servlet-mapping>

</web-app>
