<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!-- 自定义的realm。授权 认证 -->
    <bean id="customRealm" class="com.oa.web.support.shiro.token.SampleRealm">
        <description>指定加密算法</description>
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <description>hashAlgorithmName指定加密算法。hashIterations指定可以加密的次数，针对MD5加密的结果再次加密的次数</description>
                <property name="hashAlgorithmName" value="MD5"/>
                <property name="hashIterations" value="1024"/>
            </bean>
        </property>
    </bean>

    <!-- 会话Session ID生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

    <!-- redis 的缓存 -->
    <bean id="jedisManager" class="com.oa.web.support.shiro.cache.JedisManager">
        <property name="jedisPool" ref="jedisPool"/>
    </bean>

    <!-- session 创建、删除、查询 -->
    <bean id="jedisShiroSessionRepository" class="com.oa.web.support.shiro.cache.JedisShiroSessionRepository">
        <property name="jedisManager" ref="jedisManager"/>
    </bean>

    <!-- custom shiro session listener -->
    <bean id="customShiroSessionDAO" class="com.oa.web.support.shiro.CustomShiroSessionDao">
        <property name="shiroSessionRepository" ref="jedisShiroSessionRepository"/>
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean>

    <!-- custom shiro session listener -->
    <bean id="customSessionListener" class="com.oa.web.support.shiro.listenter.CustomSessionListener">
        <property name="shiroSessionRepository" ref="jedisShiroSessionRepository"/>
    </bean>


    <!-- 会话Cookie模板 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!--cookie的name，我故意取名叫xxxxbaidu -->
        <constructor-arg value="v_v-s-baidu"/>
        <property name="httpOnly" value="true"/>
        <!--cookie的有效时间 -->
        <property name="maxAge" value="-1"/>
        <!-- 配置存储Session Cookie的domain为 一级域名 -->
        <!--<property name="domain" value=".itboy.net"/>-->
    </bean>

    <!-- 会话验证调度器 -->
    <bean id="sessionValidationScheduler"
          class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
        <!-- 间隔多少时间检查，不配置是60分钟 -->
        <property name="interval" value="${session.validate.time}"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- Session Manager -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- 相隔多久检查一次session的有效性   -->
        <property name="sessionValidationInterval" value="1800000"/>
        <!-- session 有效时间为半小时 （毫秒单位）-->
        <property name="globalSessionTimeout" value="1800000"/>
        <property name="sessionDAO" ref="customShiroSessionDAO"/>
        <!-- session 监听，可以多个。 -->
        <property name="sessionListeners">
            <list>
                <ref bean="customSessionListener"/>
            </list>
        </property>
        <!-- 间隔多少时间检查，不配置是60分钟 -->
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <!-- 是否开启 检测，默认开启 -->
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <!-- 是否删除无效的，默认也是开启 -->
        <property name="deleteInvalidSessions" value="true"/>
        <!-- 会话Cookie模板 -->
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
    </bean>

    <!-- 用户缓存 -->
    <bean id="customShiroCacheManager" class="com.oa.web.support.shiro.cache.impl.CustomShiroCacheManager">
        <property name="shiroCacheManager" ref="jedisShiroCacheManager"/>
    </bean>

    <!-- shiro 缓存实现，对ShiroCacheManager，我是采用redis的实现 -->
    <bean id="jedisShiroCacheManager" class="com.oa.web.support.shiro.cache.impl.JedisShiroCacheManager">
        <property name="jedisManager" ref="jedisManager"/>
    </bean>

    <!-- 用户信息记住我功能的相关配置 -->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="v_v-re-baidu"/>
        <property name="httpOnly" value="true"/>
        <!-- 配置存储rememberMe Cookie的domain为 一级域名 -->
        <!--<property name="domain" value=".itboy.net"/>-->
        <!-- 30天时间，记住我30天 -->
        <property name="maxAge" value="2592000"/>
    </bean>

    <!-- rememberMe管理器 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位）-->
        <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('3AvVhmFLUs0KTA3Kprsdag==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>

    <!-- securityManager 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="customRealm"/>
        <property name="sessionManager" ref="sessionManager"/>
        <property name="rememberMeManager" ref="rememberMeManager"/>
        <property name="cacheManager" ref="customShiroCacheManager"/>
    </bean>

    <!-- 手动操作Session，管理Session -->
    <bean id="customSessionManager" class="com.oa.web.support.shiro.session.CustomSessionManager">
        <property name="shiroSessionRepository" ref="jedisShiroSessionRepository"/>
        <property name="customShiroSessionDAO" ref="customShiroSessionDAO"/>
    </bean>

    <!-- 静态注入，相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

    <!-- session 校验单个用户是否多次登录 -->
    <bean id="kickoutSessionFilter" class="com.oa.web.support.shiro.filter.KickoutSessionFilter">
        <property name="kickoutUrl" value="/u/login.shtml?kickout"/>
    </bean>

    <!-- 静态注入 jedisShiroSessionRepository-->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod"
                  value="com.sojson.core.shiro.filter.KickoutSessionFilter.setShiroSessionRepository"/>
        <property name="arguments" ref="jedisShiroSessionRepository"/>
    </bean>

    <!--
        自定义角色过滤器 支持多个角色可以访问同一个资源 eg:/home.jsp = authc,roleOR[admin,user]
        用户有admin或者user角色 就可以访问
    -->
    <!-- 认证数据库存储-->
    <bean id="shiroFilterFactoryBean" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean"/>
    <bean id="shiroManager" class="com.oa.web.support.shiro.service.impl.ShiroManagerImpl">
        <property name="shiroFilterFactoryBean" ref="shiroFilterFactoryBean"/>
    </bean>
    <bean id="login" class="com.oa.web.support.shiro.filter.LoginFilter"/>
    <bean id="role" class="com.oa.web.support.shiro.filter.RoleFilter"/>
    <bean id="permission" class="com.oa.web.support.shiro.filter.PermissionFilter"/>
    <bean id="simple" class="com.oa.web.support.shiro.filter.SimpleAuthFilter"/>


    <!-- shiro的web过滤器。 也是web.xml 中 shiro 的 filter 对应的 bean -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!-- logiUrl 认证提交地址，如果没有认证通过将会请求此地址进行认证，请求此地址将由 formAuthenticationFilter 进行表单认证 -->
        <property name="loginUrl" value="/login"/>
        <!-- 认证成功后统一跳转到first.action，建议不配置，shiro认证成功自动到上一个链接 -->
        <property name="successUrl" value="/first"/>
        <!-- 通过 unauthorizedUrl 指定没有权限时跳转页面 -->
        <property name="unauthorizedUrl" value="/refuse.jsp"/>
        <!-- 自定义filter配置 -->
        <property name="filters">
            <util:map>
                <entry key="login" value-ref="login"/>
                <entry key="role" value-ref="role"/>
                <entry key="simple" value-ref="simple"/>
                <entry key="permission" value-ref="permission"/>
                <entry key="kickout" value-ref="kickoutSessionFilter"/>
            </util:map>
        </property>

        <!-- 过滤器链定义，从上向下顺序执行，一般将/**放在最后面 -->
        <!--<property name="filterChainDefinitions">-->
        <!--<value>-->
        <!--&lt;!&ndash;静态资源可以匿名访问 &ndash;&gt;-->
        <!--/images/** = anon-->
        <!--/js/** = anon-->
        <!--/styles/** = anon-->
        <!--&lt;!&ndash;登录验证码匿名访问&ndash;&gt;-->
        <!--/validatecode.jsp = anon-->
        <!--&lt;!&ndash;任何链接都可以不认证访问&ndash;&gt;-->
        <!--/** = anon-->
        <!--</value>-->
        <!--</property>-->
        <property name="filterChainDefinitions" value="#{shiroManager.loadFilterChainDefinitions()}"/>
    </bean>

    <!-- Shiro生命周期处理器-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

</beans>