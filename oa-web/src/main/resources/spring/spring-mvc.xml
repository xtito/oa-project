<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">

    <!-- 可以扫描controller、service、... 这里让扫描controller，指定controller的包 -->
    <context:component-scan base-package="com.oa.web.**.controller.*" />

    <!--
        mvc:annotation-driven
            会自动注册 RequestMappingHandlerMapping 与 RequestMappingHandlerAdapter 两个Bean,这是
            Spring MVC为 @Controller 分发请求所必需的，并且提供了数据绑定支持，比如json转换解析器就默认加载了
            @NumberFormatannotation支持，@DateTimeFormat支持,@Valid支持读写XML的支持（JAXB）和读写JSON的
            支持（默认Jackson）等功能，代替上边注解映射器和注解适配器配置。
	        解决问题：
	            JSON 返回及 返回值编码问题
	            启动Spring MVC的注解功能，完成请求和注解POJO的映射并且设置ResponseBody返回编码
        mvc:default-servlet-handler
           它会像一个检查员，对进入DispatcherServlet的URL进行筛查，如果发现是静态资源的请求，就将该请求
           转由Web应用服务器默认的Servlet处理，如果不是静态资源的请求，才由DispatcherServlet继续处理
        mvc:interceptors 这个标签用于注册一个自定义拦截器或者是
        mvc:redirect-view-controller
        mvc:resources 让指定的静态资源的访问不受拦截
        mvc:status-controller 状态控制器标签 <mvc:status-controller path="/status" status-code="200"/>
        mvc:view-controller 带状态的视图控制器标签
	-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/html;charset=UTF-8</value>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
            </bean>

            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <description>Jackson响应配置</description>
                <property name="prettyPrint" value="true"/>
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=UTF-8</value>
                        <value>text/html;charset=UTF-8</value>
                    </list>
                </property>

                <property name="objectMapper">
                    <bean class="com.fasterxml.jackson.databind.ObjectMapper">
                        <description>配置后台返回JSON日期格式全局处理</description>
                        <property name="dateFormat">
                            <bean class="java.text.SimpleDateFormat">
                                <constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss" />
                            </bean>
                        </property>
                    </bean>
                </property>
            </bean>
        </mvc:message-converters >
    </mvc:annotation-driven>


    <!--<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">-->
        <!--<description>自定义格式转换器</description>-->
        <!--<property name="converters">-->
            <!--<set>-->
                <!--&lt;!&ndash; 自定义日期转换器 &ndash;&gt;-->
                <!--<bean class="com.oa.core.converter.CustomDateConverter" />-->
            <!--</set>-->
        <!--</property>-->
    <!--</bean>-->


    <!-- 支持上传文件 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 单位字节，（1024 * 1024） * 200 = 200MB -->
        <property name="maxUploadSize" value="209715200" />
        <property name="defaultEncoding" value="UTF-8" />
        <!--resolveLazily属性启用是为了推迟文件解析，以便在UploadAction 中捕获文件大小异常-->
        <property name="resolveLazily" value="true" />
    </bean>


    <!-- 视图解析器 -->
    <!--  解析jsp解析，默认使用jstl标签，classpath下的得有jstl的包 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 配置jsp路径的前缀 -->
        <property name="prefix" value="/static/pages/"/>
        <!-- 配置jsp路径的后缀 -->
        <property name="suffix" value=".jsp"/>
    </bean>

</beans>