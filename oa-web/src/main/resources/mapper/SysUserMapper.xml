<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.oa.web.mapper.SysUserMapper">

    <resultMap id="BaseResultMap" type="com.oa.bean.sys.SysUser">
        <id column="id" property="id"/>
        <result column="login_name" property="loginName"/>
        <result column="nickname" property="nickname"/>
        <result column="email" property="email"/>
        <result column="password_" property="password"/>
        <result column="phone" property="phone"/>
        <result column="department_id" property="departmentId"/>
        <result column="status_" property="status"/>
        <result column="lock_time" property="lockTime"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>
        <result column="last_login_time" property="lastLoginTime"/>
        <result column="user_type" property="userType"/>
        <result column="description" property="description"/>
        <result column="def_identify" property="defIdentify"/>
        <result column="dept_name" property="deptName"/>
    </resultMap>

    <resultMap id="UserRoleViewMap" type="com.oa.bean.sys.view.UserRoleView" extends="BaseResultMap">
        <result column="role_id" property="roleId"/>
        <result column="role_name" property="roleName"/>
    </resultMap>

    <sql id="Base_Column_List">
        <trim>
            id, login_name, nickname, email, password_, phone, department_id, status_, lock_time,
            create_time, update_time, last_login_time, user_type, description, def_identify
        </trim>
    </sql>

    <insert id="saveSysUser" useGeneratedKeys="true" keyProperty="id" parameterType="com.oa.bean.sys.SysUser">
        INSERT INTO sys_user (<include refid="Base_Column_List"/>)
        <trim prefix="VALUES (" suffix=")" suffixOverrides=",">
            #{id},#{loginName},#{nickname},#{email},#{password},#{phone},#{departmentId},#{status},
            #{lockTime},#{createTime},#{updateTime},#{lastLoginTime},#{userType},#{description},#{defIdentify}
        </trim>
    </insert>

    <!-- 修改密码 -->
    <update id="updateUserPwd" parameterType="com.oa.bean.sys.SysUser">
        UPDATE sys_user
        <set>
            password_ = #{password}
        </set>
        WHERE id = #{id}
    </update>

    <update id="updateSysUser" parameterType="com.oa.bean.sys.SysUser">
        UPDATE sys_user
        <set>
            <!--<if test="loginName != null">-->
                <!--login_name = #{loginName},-->
            <!--</if>-->
            <if test="nickname != null">
                nickname = #{nickname},
            </if>
            <if test="email != null">
                email = #{email},
            </if>
            <!--<if test="password != null">-->
                <!--password_ = #{password},-->
            <!--</if>-->
            <if test="phone != null">
                phone = #{phone},
            </if>
            <if test="departmentId != null">
                department_id = #{departmentId},
            </if>
            <if test="status != null and status != 0">
                status_ = #{status},
            </if>
            <if test="lockTime != null">
                lock_time = #{lockTime},
            </if>
            <!--<if test="createTime != null">-->
                <!--create_time = #{createTime},-->
            <!--</if>-->
            <if test="updateTime != null">
                update_time = #{updateTime},
            </if>
            <if test="lastLoginTime != null">
                last_login_time = #{lastLoginTime},
            </if>
            <if test="userType != null">
                user_type = #{userType},
            </if>
            <if test="description != null">
                description = #{description},
            </if>
            <if test="defIdentify != null">
                def_identify = #{defIdentify}
            </if>
        </set>
        WHERE id = #{id}
    </update>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        <if test="_parameter != null">
            DELETE FROM sys_user WHERE id = #{id}
        </if>
    </delete>

    <!-- 根据主键ID查询用户，并查询部门名称 -->
    <select id="getByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT
        <trim>
            A.id, A.login_name, A.nickname, A.email, A.password_, A.phone, A.department_id, A.status_, A.lock_time,
            A.create_time, A.update_time, A.last_login_time, A.user_type, A.description, A.def_identify, B.name_ AS dept_name
        </trim>
        FROM sys_user AS A
        LEFT JOIN sys_department AS B ON B.id = A.department_id
        WHERE A.id = #{id}
    </select>

    <!-- 根据用户登录名查询用户，并查询部门名称 -->
    <select id="getUserByLoginName" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM sys_user WHERE login_name = #{loginName}
    </select>

    <!-- 根据用户登录名和密码查询用户 -->
    <select id="getUserByLoginNameAndPwd" parameterType="java.util.Map" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/> FROM sys_user WHERE login_name = #{loginName} AND password_ = #{password}
    </select>

    <select id="getUserList" parameterType="com.oa.core.bean.PageBean" resultMap="BaseResultMap">
        SELECT
        <trim>
            A.id, A.login_name, A.nickname, A.email, A.password_, A.phone, A.department_id, A.status_, A.lock_time,
            A.create_time, A.update_time, A.last_login_time, A.user_type, A.description, A.def_identify, B.name_ AS dept_name
        </trim>
        FROM sys_user AS A
        LEFT JOIN sys_department AS B ON B.id = A.department_id
        <where>
            <trim>
                <if test="params.userStatus != null and params.userStatus != ''">
                    AND A.status_ = #{params.userStatus}
                </if>
                <if test="params.loginName != null and params.loginName != ''">
                    AND A.login_name = #{params.loginName}
                </if>
                <if test="params.loginNameLike != null and params.loginNameLike != ''">
                    AND A.login_name LIKE '%${params.loginNameLike}%'
                </if>
                <if test="params.email != null and params.email != ''">
                    AND A.email = #{params.email}
                </if>
                <if test="params.phone != null and params.phone != ''">
                    AND A.phone = #{params.phone}
                </if>
                <if test="params.nickname != null and params.nickname != ''">
                    AND A.nickname = #{params.nickname}
                </if>
                <if test="params.nicknameLike != null and params.nicknameLike != ''">
                    AND A.nickname LIKE '%${params.nicknameLike}%'
                </if>
                <if test="params.begin != null and params.begin != '' and params.end != null and params.end != ''">
                    AND date_format(A.create_time, '%Y-%m-%d') BETWEEN #{params.begin} AND #{params.end}
                </if>
            </trim>
        </where>
        <if test="orderBy != null and orderBy != ''">
            ORDER BY ${orderBy}
        </if>
        <if test="orderBy == null or orderBy == ''">
            ORDER BY login_name, create_time
        </if>
    </select>


    <!-- 根据用户ID查询该用户所拥有的角色ID -->
    <select id="getRoleByUserId" parameterType="java.lang.Long" resultType="java.util.Set">
        SELECT <trim>role_id</trim> FROM sys_user_role  WHERE user_id=#{userId}
    </select>


    <!-- 查询用户角色列表 -->
    <select id="getUserAndRoleList" parameterType="com.oa.core.bean.PageBean" resultMap="UserRoleViewMap">
        SELECT
            A.id,
            A.login_name,
            A.nickname,
            A.email,
            A.status_,
            GROUP_CONCAT(DISTINCT C.id ORDER BY C.id SEPARATOR ',') AS role_id,
            GROUP_CONCAT(DISTINCT C.name_ ORDER BY C.id SEPARATOR ',') AS role_name
        FROM sys_user AS A
        LEFT JOIN sys_user_role AS B ON B.user_id = A.id
        LEFT JOIN sys_role AS C ON C.id = B.role_id
        <where>
            <if test="params.searchCon != null and params.searchCon != ''">
                AND (
                  LOWER(A.nickname) LIKE LOWER(CONCAT('%', #{params.searchCon},'%')) or
                  LOWER(A.login_name) LIKE LOWER(CONCAT('%', #{params.searchCon},'%')) or
                  LOWER(A.email) LIKE LOWER(CONCAT('%', #{params.searchCon}, '%'))
                )
            </if>
        </where>
        GROUP BY A.id

        <if test="orderBy != null and orderBy != ''">
            ORDER BY ${orderBy}
        </if>
        <if test="orderBy == null or orderBy == ''">
            ORDER BY id,login_name
        </if>
    </select>

</mapper>